export const codeOptimizationPrompt = {
  id: "sample-4",
  title: "代码简化",
  content: `# 代码整洁指南

## 使用常量替代魔法数字
- 用命名常量替换硬编码值
- 使用描述性常量名称解释值的用途
- 将常量放在文件顶部或专用常量文件中

## 有意义的命名
- 变量、函数和类名应体现其用途
- 名称应解释存在的原因和使用方式
- 除非是通用缩写，否则避免使用简写

## 聪明的注释
- 不要注释代码在做什么——让代码自文档化
- 用注释解释为什么采用特定实现方式
- 为API、复杂算法和非显而易见的副作用添加文档

## 单一职责
- 每个函数只做一件事
- 函数应保持短小精悍
- 如果需要注释来解释函数功能，就应该拆分它

## DRY原则（不要重复自己）
- 将重复代码提取为可复用函数
- 通过适当抽象共享通用逻辑
- 维护单一事实来源

## 整洁的结构
- 保持相关代码集中存放
- 按逻辑层次组织代码
- 使用统一的文件和文件夹命名规范

## 封装性
- 隐藏实现细节
- 提供清晰接口
- 将嵌套条件判断提取到命名良好的函数中

## 代码质量维护
- 持续重构
- 尽早解决技术债务
- 让代码比你接手时更整洁

## 测试
- 修复bug前先写测试
- 保持测试代码可读性和可维护性
- 测试边界条件和异常情况

## 版本控制
- 编写清晰的提交信息
- 进行小而专注的提交
- 使用有意义的分支名称`,
  categoryId: "coding",
  tags: ["代码优化", "代码整洁", "代码重构"],
} as const; 